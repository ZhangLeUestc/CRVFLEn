%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%	Implemetation of the CNN_tracker described in paper
%	"MEEM: Robust Tracking via Multiple Experts using Entropy Minimization", 
%   Jianming Zhang, Shugao Ma, Stan Sclaroff, ECCV, 2014
%	
%	Copyright (C) 2014 Jianming Zhang
%
%	This program is free software: you can redistribute it and/or modify
%	it under the terms of the GNU General Public License as published by
%	the Free Software Foundation, either version 3 of the License, or
%	(at your option) any later version.
%
%	This program is distributed in the hope that it will be useful,
%	but WITHOUT ANY WARRANTY; without even the implied warranty of
%	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
%	GNU General Public License for more details.
%
%	You should have received a copy of the GNU General Public License
%	along with this program.  If not, see <http://www.gnu.org/licenses/>.
%
%	If you have problems about this software, please contact: jmzhang@bu.edu
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


global CNN_tracker

Z=size(sampler.patterns_dt);
f=1/100;
rand('state',0)
randn('state',0)
CNN_tracker.layers = {} ;
N=100;
CNN_tracker.layers{end+1} = struct('type', 'conv', ...
                           'filters', f*randn(4,4,Z(end-1),N, 'single'), ...
                           'biases', zeros( 1,N, 'single'), ...
                           'stride', 1, ...
                           'pad', 2) ;
CNN_tracker.layers{end+1} = struct('type', 'relu') ;
CNN_tracker.layers{end+1} = struct('type', 'pool', ...
                           'method', 'avg', ...
                           'pool', [2 2], ...
                           'stride',2, ...
                           'pad', 0) ;
CNN_tracker.layers{end+1} = struct('type', 'normalize', ...
                          'param', [4 1 1/16 0.75]) ;
                       

                       
                       
% 
% CNN_tracker.layers{end+1} = struct('type', 'conv', ...
%                            'filters', f*randn(2,2,30,30, 'single'),...
%                            'biases', zeros(1,30,'single'), ...
%                            'stride', 1, ...
%                            'pad', 1) ;
%CNN_tracker.layers{end+1} = struct('type', 'relu') ;
% CNN_tracker.layers{end+1} = struct('type', 'pool', ...
%                            'method', 'avg', ...
%                            'pool', [2 2], ...
%                            'stride', 1, ...
%                            'pad', 0) ;

 CNN_tracker.layers{end+1} = struct('type', 'normalize', ...
                           'param', [2 1 1/4 0.5]) ;
% %


CNN_tracker.lambda=1;
% CNN_tracker.layers{end+1} = struct('type', 'conv', ...
%                            'filters', f*randn(4,4,50,500, 'single'),...
%                            'biases', zeros(1,500,'single'), ...
%                            'stride', 1, ...
%                            'pad', 0) ;
% CNN_tracker.layers{end+1} = struct('type', 'relu') ;
% CNN_tracker.layers{end+1} = struct('type', 'conv', ...
%                            'filters', f*randn(1,1,500,10, 'single'),...
%                            'biases', zeros(1,10,'single'), ...
%                            'stride', 1, ...
%                            'pad', 0) ;
% CNN_tracker.layers{end+1} = struct('type', 'softmaxloss') ;